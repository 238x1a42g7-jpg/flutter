Question 9: Create a Provider that provides a list of strings and a function to add new strings to the list. Display the list in another widget.
source code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

// Step 1: Create List Provider
class StringListProvider with ChangeNotifier {
  List<String> _items = [];

  List<String> get items => _items;

  void addItem(String newItem) {
    _items.add(newItem);
    notifyListeners(); // Notify listeners to rebuild UI
  }
}

void main() {
  runApp(
    ChangeNotifierProvider(
      create: (_) => StringListProvider(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: const StringListScreen(),
    );
  }
}

// Step 2: Main Screen
class StringListScreen extends StatefulWidget {
  const StringListScreen({super.key});

  @override
  _StringListScreenState createState() => _StringListScreenState();
}

class _StringListScreenState extends State<StringListScreen> {
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final stringProvider = Provider.of<StringListProvider>(context, listen: false);

    return Scaffold(
      appBar: AppBar(title: const Text("Provider String List")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    decoration: const InputDecoration(
                      labelText: "Enter a string",
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: () {
                    if (_controller.text.isNotEmpty) {
                      stringProvider.addItem(_controller.text);
                      _controller.clear();
                    }
                  },
                  child: const Text("Add"),
                ),
              ],
            ),
            const SizedBox(height: 20),
            const Text(
              "String List:",
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            // Step 3: Display list using Consumer
            Expanded(
              child: Consumer<StringListProvider>(
                builder: (context, provider, child) {
                  return ListView.builder(
                    itemCount: provider.items.length,
                    itemBuilder: (context, index) {
                      return ListTile(
                        title: Text(provider.items[index]),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
