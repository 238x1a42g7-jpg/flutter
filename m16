Question 21: Create a sample drawing app whose background should be white and where the user just draws something.

Hint 1:- Use the inbuilt paint library of Dart.

source code:
import 'package:flutter/material.dart';
import 'dart:ui' as ui;

void main() {
  runApp(MaterialApp(
    home: DrawingApp(),
    debugShowCheckedModeBanner: false,
  ));
}

class DrawingApp extends StatefulWidget {
  @override
  _DrawingAppState createState() => _DrawingAppState();
}

class _DrawingAppState extends State<DrawingApp> {
  List<Offset?> points = []; // Stores user touch points

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Simple Drawing App')),
      backgroundColor: Colors.white,
      body: GestureDetector(
        // When the user moves their finger
        onPanUpdate: (details) {
          setState(() {
            // Add the point where the user is touching
            points.add(details.localPosition);
          });
        },
        // Add a null to separate strokes (like lifting the pen)
        onPanEnd: (details) {
          setState(() {
            points.add(null);
          });
        },
        child: CustomPaint(
          painter: MyPainter(points),
          size: Size.infinite,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            points.clear(); // Clear the drawing
          });
        },
        child: const Icon(Icons.delete),
        tooltip: "Clear Drawing",
      ),
    );
  }
}

class MyPainter extends CustomPainter {
  final List<Offset?> points;

  MyPainter(this.points);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black
      ..strokeWidth = 4.0
      ..strokeCap = StrokeCap.round;

    // Draw each line segment
    for (int i = 0; i < points.length - 1; i++) {
      if (points[i] != null && points[i + 1] != null) {
        canvas.drawLine(points[i]!, points[i + 1]!, paint);
      }
    }
  }

  @override
  bool shouldRepaint(MyPainter oldDelegate) => true;
}
